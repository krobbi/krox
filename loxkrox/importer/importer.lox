// Imports a program from a collection of modules.
class Importer {
	// Initialize the importer's logger and parser.
	init(logger){
		// The importer's logger.
		this.logger = logger;
		
		// The importer's parser.
		this.parser = Parser(logger);
	}
	
	// Import and return a program from its main module's path.
	import_program(path){
		path = this.split_path(path);
		var name = path.pop_back();
		var program = ProgramASTNode(path.join("/"));
		
		if(!name){
			this.logger.log("Main module path cannot be empty.");
			return program;
		}
		
		if(!this.is_part_valid(name)){
			this.logger.log("Invalid main module path.");
			return program;
		}
		
		var queue = List();
		queue.push_back(name);
		
		while(!queue.is_empty()){
			this.import_queue(program, queue);
		}
		
		return program;
	}
	
	// Import a module to a program from a growable queue of module names.
	import_queue(program, queue){
		var name = queue.pop_back();
		
		if(!name or this.has_module(program, name)){
			return; // Empty queue or module already imported.
		}
		
		var stream = _read(program.path + "/" + name);
		
		if(!stream){
			this.logger.log("Failed to open `" + name + "` for reading. File may not exist.");
			return;
		}
		
		this.parser.reset(name, stream);
		var module = this.parser.parse_module();
		
		if(_close(stream)){
			this.logger.log("Parser failed to close `" + name + "` after reading.");
		}
		
		module.name = name;
		program.modules.push_back(module);
		var iter = module.imports.iter();
		
		while(iter.has_next()){
			this.resolve_import(name, iter.get_next(), queue);
		}
	}
	
	// Resolve a module's import and append the imported name to a queue.
	resolve_import(name, import, queue){
		var import_path = import.path.value;
		var import_span = import.path.span;
		
		if(import_path == ""){
			this.logger.log_at("Import paths cannot be empty.", import_span);
			return;
		}
		
		var import_path_leader = _substring(import_path, 0, 1);
		var imported_name;
		
		if(import_path_leader == "/" or import_path_leader == "\"){
			import_path = _substring(import_path, 1, _length(import_path) - 1);
			imported_name = List(); // Absolute import path.
		} else {
			imported_name = this.split_path(name);
			imported_name.pop_back();
		}
		
		import_path = this.split_path(import_path);
		var iter = import_path.iter();
		
		while(iter.has_next()){
			var import_path_part = iter.get_next();
			
			if(import_path_part == "."){
				// Allow single dot to mean same directory.
			} else if(import_path_part == ".."){
				// Allow double dot to mean parent directory.
				if(imported_name.is_empty()){
					this.logger.log_at(
						"Import paths cannot ascend above the main directory.", import_span
					);
					return;
				}
				
				imported_name.pop_back();
			} else {
				if(!this.is_part_valid(import_path_part)){
					this.logger.log_at("Invalid import path.", import_span);
					return;
				}
				
				imported_name.push_back(import_path_part);
			}
		}
		
		imported_name = imported_name.join("/");
		
		if(imported_name == ""){
			this.logger.log_at("Import paths must contain a file name.", import_span);
			return;
		}
		
		if(imported_name == name){
			this.logger.log_at("Modules cannot import themselves.", import_span);
			return;
		}
		
		import.name = imported_name;
		queue.push_back(imported_name);
	}
	
	// Return whether a program has a module from its name.
	has_module(program, name){
		var iter = program.modules.iter();
		
		while(iter.has_next()){
			if(iter.get_next().name == name){
				return true;
			}
		}
		
		return false;
	}
	
	// Return whether a path part is valid.
	is_part_valid(part){
		var length = _length(part);
		
		if(length < 1){
			return false; // Empty path parts are invalid.
		}
		
		if(_substring(part, 0, 1) == " "){
			return false; // Leading spaces are invalid.
		}
		
		var trailer = _substring(part, length - 1, 1);
		
		if(trailer == " " or trailer == "."){
			return false; // Trailing spaces or dots are invalid.
		}
		
		var previous = nil;
		
		for(var i = 0; i < length; i = i + 1){
			var current = _substring(part, i, 1);
			
			if(current == previous and (current == " " or current == ".")){
				return false; // Adjacent spaces or dots are invalid.
			}
			
			if(
				current == "*"
				or current == "/"
				or current == ":"
				or current == "<"
				or current == ">"
				or current == "?"
				or current == "\"
				or current == "|"
			){
				return false; // Typical special characters are invalid.
			}
			
			var char = _ord(current);
			
			if(char == CHAR_QUOTE or char < CHAR_SPACE or char >= CHAR_DELETE){
				return false; // Non printable characters are invalid.
			}
			
			previous = current;
		}
		
		return true;
	}
	
	// Split a path string to a list of path parts.
	split_path(path){
		var length = _length(path);
		var part = "";
		var parts = List();
		
		for(var i = 0; i < length; i = i + 1){
			var char_string = _substring(path, i, 1);
			
			if(char_string == "/" or char_string == "\"){
				parts.push_back(part);
				part = "";
			} else {
				part = part + char_string;
			}
		}
		
		if(part != ""){
			parts.push_back(part);
		}
		
		return parts;
	}
}
