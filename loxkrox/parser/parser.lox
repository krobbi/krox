// Parses an abstract syntax tree from a stream of tokens.
class Parser {
	// Initialize the parser's logger, lexer, and data.
	init(logger){
		// The parser's logger.
		this.logger = logger;
		
		// The parser's lexer.
		this.lexer = Lexer(logger);
		
		// Whether the parser has encountered any syntax errors.
		this.has_errors = false;
		
		// The parser's next token.
		this.next = Token(TokenType.EOF, nil, Span());
		
		// The parser's current span.
		this.current_span = Span();
		
		// The parser's span stack.
		this.span_stack = List();
	}
	
	// Reset the parser from a module name and an input stream.
	reset(module, stream){
		this.lexer.reset(module, stream);
		this.has_errors = false;
		this.advance();
	}
	
	// Parse and return a module AST node.
	parse_module(){
		this.begin();
		var module = ModuleASTNode();
		
		while(!this.match(TokenType.EOF)){
			var bump_token = this.next;
			
			if(this.match(TokenType.GREATER)){
				this.try(this.parse_import, module.imports);
			} else if(this.match(TokenType.LESS)){
				this.try(this.parse_export, module.exports);
			} else if(this.match(TokenType.FN)){
				this.try(this.parse_fn_stmt, module.functions);
			} else {
				this.log_error("Expected an import, export, or function.");
			}
			
			if(this.next == bump_token){
				this.advance(); // Prevent infinite loop.
			}
		}
		
		if(this.has_errors or this.lexer.has_errors){
			module.is_valid = false;
		}
		
		return this.end(module);
	}
	
	// Parse and return an import AST node if possible.
	parse_import(){
		this.begin();
		this.expect(TokenType.GREATER);
		var path = this.expect(TokenType.STRING);
		
		if(!path){
			return this.end(nil);
		}
		
		this.expect(TokenType.OPEN_BRACE);
		var accepts_item = true;
		var import = ImportASTNode(path);
		
		while(accepts_item and !this.match(TokenType.CLOSE_BRACE) and !this.match(TokenType.EOF)){
			this.try(this.parse_import_item, import.items);
			
			if(!this.accept(TokenType.COMMA)){
				accepts_item = false;
			}
		}
		
		this.expect(TokenType.CLOSE_BRACE);
		return this.end(import);
	}
	
	// Parse and return an import item AST node if possible.
	parse_import_item(){
		this.begin();
		var external = this.expect(TokenType.IDENTIFIER);
		
		if(!external){
			return this.end(nil);
		}
		
		var internal = nil;
		
		if(this.accept(TokenType.GREATER)){
			internal = this.expect(TokenType.IDENTIFIER);
		}
		
		return this.end(ImportItemASTNode(external, internal));
	}
	
	// Parse and return an export AST node if possible.
	parse_export(){
		this.begin();
		this.expect(TokenType.LESS);
		var function = this.parse_fn_stmt();
		
		if(!function){
			return this.end(nil);
		}
		
		return this.end(ExportASTNode(function));
	}
	
	// Parse and return a statement AST node if possible.
	parse_stmt(){
		this.begin();
		
		if(this.match(TokenType.FN)){
			return this.end(this.parse_fn_stmt());
		} else if(this.match(TokenType.OPEN_BRACE)){
			return this.end(this.parse_block_stmt());
		} else if(this.match(TokenType.PRINT)){
			return this.end(this.parse_print_stmt());
		} else if(this.match(TokenType.SEMICOLON)){
			return this.end(this.parse_nop_stmt());
		} else {
			return this.end(this.parse_expr_stmt());
		}
	}
	
	// Parse and return a function statement AST node if possible.
	parse_fn_stmt(){
		this.begin();
		this.expect(TokenType.FN);
		var identifier = this.expect(TokenType.IDENTIFIER);
		
		if(!identifier){
			return this.end(nil);
		}
		
		this.expect(TokenType.OPEN_PAREN);
		this.expect(TokenType.CLOSE_PAREN);
		return this.end(FnStmtASTNode(identifier, this.parse_block_stmt()));
	}
	
	// Parse and return a block statement AST node.
	parse_block_stmt(){
		this.begin();
		this.expect(TokenType.OPEN_BRACE);
		var block_stmt = BlockStmtASTNode();
		
		while(!this.match(TokenType.CLOSE_BRACE) and !this.match(TokenType.EOF)){
			var bump_token = this.next;
			this.try(this.parse_stmt, block_stmt.statements);
			
			if(this.next == bump_token){
				this.advance(); // Prevent infinite loop.
			}
		}
		
		this.expect(TokenType.CLOSE_BRACE);
		return this.end(block_stmt);
	}
	
	// Parse and return a print statement AST node.
	parse_print_stmt(){
		this.begin();
		this.expect(TokenType.PRINT);
		var expression = this.parse_paren_expr();
		
		if(!expression){
			return this.end(nil);
		}
		
		this.expect(TokenType.SEMICOLON);
		return this.end(PrintStmtASTNode(expression));
	}
	
	// Parse and return a no operation statement AST node.
	parse_nop_stmt(){
		this.begin();
		this.expect(TokenType.SEMICOLON);
		return this.end(NopStmtASTNode());
	}
	
	// Parse and return an expression statement AST node if possible.
	parse_expr_stmt(){
		this.begin();
		var expression = this.parse_expr();
		
		if(!expression){
			return this.end(nil);
		}
		
		this.expect(TokenType.SEMICOLON);
		return this.end(ExprStmtASTNode(expression));
	}
	
	// Parse and return an expression AST node if possible.
	parse_expr(){
		this.begin();
		return this.end(this.parse_primary_expr());
	}
	
	// Parse and return a primary expression AST node if possible.
	parse_primary_expr(){
		this.begin();
		
		if(this.match(TokenType.OPEN_PAREN)){
			return this.end(this.parse_paren_expr());
		} else if(this.match(TokenType.STRING)){
			return this.end(this.parse_literal_expr());
		} else {
			this.log_error("Expected a primary expression.");
			return this.end(nil);
		}
	}
	
	// Parse and return a parenthesized expression AST node if possible.
	parse_paren_expr(){
		this.begin();
		this.expect(TokenType.OPEN_PAREN);
		var expression = this.parse_expr();
		
		if(!expression){
			return this.end(nil);
		}
		
		this.expect(TokenType.CLOSE_PAREN);
		return this.end(ParenExprASTNode(expression));
	}
	
	// Parse and return a literal expression AST node if possible.
	parse_literal_expr(){
		this.begin();
		var value = this.expect(TokenType.STRING);
		
		if(!value){
			return this.end(nil);
		}
		
		return this.end(LiteralExprASTNode(value.value));
	}
	
	// Log an error message at the next token's span.
	log_error(message){
		this.log_error_at(message, this.next.span);
	}
	
	// Log an error message at a span.
	log_error_at(message, span){
		this.logger.log_at(message, span);
		this.has_errors = true;
	}
	
	// Begin an AST node.
	begin(){
		this.span_stack.push_back(this.next.span);
	}
	
	// End and return an AST node.
	end(node){
		if(node){
			node.span.clone_from(this.span_stack.pop_back());
			node.span.extend_from_span(this.current_span);
		}
		
		return node;
	}
	
	// Append the result of a parse rule to an AST node list if possible.
	try(rule, list){
		var node = rule();
		
		if(node){
			list.push_back(node);
		}
	}
	
	// Return whether the next token matches a token type.
	match(type){
		return this.next.type == type;
	}
	
	// Consume and return the next token if it matches a type.
	accept(type){
		if(this.match(type)){
			return this.advance();
		} else {
			return nil;
		}
	}
	
	// Consume and return the next token if it matches a type or log an error.
	expect(type){
		var consumed = this.accept(type);
		
		if(!consumed){
			this.log_error(
				"Expected " + TokenType.get_name(type) + ", got " + this.next.to_string() + "."
			);
		}
		
		return consumed;
	}
	
	// Advance to the next token and return the new current token.
	advance(){
		var current = this.next;
		this.current_span = current.span;
		this.next = this.lexer.scan_token();
		return current;
	}
}
