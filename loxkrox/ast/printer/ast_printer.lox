// An AST visitor that prints an AST.
class ASTPrinter < ASTVisitor {
	// Initialize the AST printer's current AST printer node.
	init(){
		super.init();
		
		// The AST printer's current AST printer node.
		this.current = nil;
	}
	
	// Print an AST from its root node.
	print_ast(node){
		this.visit(node).print_node(List());
	}
	
	// Visit a block statement AST node and return an AST printer node.
	visit_block_stmt(node){
		this.begin("BlockStmt", node);
		this.append_node_list("statements", node.statements);
		return this.end();
	}
	
	// Visit an export AST node and return an AST printer node.
	visit_export(node){
		this.begin("Export", node);
		this.append_node("function", node.function);
		return this.end();
	}
	
	// Visit an expression statement AST node and return an AST printer node.
	visit_expr_stmt(node){
		this.begin("ExprStmt", node);
		this.append_node("expression", node.expression);
		return this.end();
	}
	
	// Visit a function statement AST node and return an AST printer node.
	visit_fn_stmt(node){
		this.begin("FnStmt", node);
		this.append_token("identifier", node.identifier);
		this.append_node("body", node.body);
		return this.end();
	}
	
	// Visit an import AST node and return an AST printer node.
	visit_import(node){
		this.begin("Import", node);
		this.append_token("path", node.path);
		
		if(node.name){
			this.append_string("name", node.name);
		}
		
		this.append_node_list("items", node.items);
		return this.end();
	}
	
	// Visit an import item AST node and return an AST printer node.
	visit_import_item(node){
		this.begin("ImportItem", node);
		this.append_token("external", node.external);
		
		if(node.internal){
			this.append_token("internal", node.internal);
		}
		
		return this.end();
	}
	
	// Visit a literal expression AST node and return an AST printer node.
	visit_literal_expr(node){
		this.begin("LiteralExpr", node);
		this.append_string("value", node.value);
		return this.end();
	}
	
	// Visit a module AST node and return an AST printer node.
	visit_module(node){
		this.begin("Module", node);
		
		if(node.name){
			this.append_string("name", node.name);
		}
		
		this.append_node_list("imports", node.imports);
		this.append_node_list("exports", node.exports);
		this.append_node_list("functions", node.functions);
		return this.end();
	}
	
	// Visit a no operation statement AST node and return an AST printer node.
	visit_nop_stmt(node){
		this.begin("NopStmt", node);
		return this.end();
	}
	
	// Visit a parenthesized expression AST node and return an AST printer node.
	visit_paren_expr(node){
		this.begin("ParenExpr", node);
		this.append_node("expression", node.expression);
		return this.end();
	}
	
	// Visit a program AST node ad return an AST printer node.
	visit_program(node){
		this.begin("Program", node);
		this.append_string("path", node.path);
		this.append_node_list("modules", node.modules);
		return this.end();
	}
	
	// Begin a new current AST printer node from a name and an AST node.
	begin(name, node){
		this.current = ASTPrinterNode("(" + name + " " + node.span.to_string() + ")");
	}
	
	// Append a list of AST nodes to the current AST printer node from a name.
	append_node_list(name, list){
		var current = this.current;
		var list_node = ASTPrinterNode("[" + name + "]");
		var iter = list.iter();
		
		while(iter.has_next()){
			list_node.append(this.visit(iter.get_next()));
		}
		
		current.append(list_node);
		this.current = current;
	}
	
	// Append an AST node to the current AST printer node from a name.
	append_node(name, node){
		var current = this.current;
		var wrapper_node = ASTPrinterNode("{" + name + "}");
		wrapper_node.append(this.visit(node));
		current.append(wrapper_node);
		this.current = current;
	}
	
	// Append a token to the current AST printer node from a name.
	append_token(name, token){
		var wrapper_node = ASTPrinterNode("{" + name + "}");
		var message;
		
		if(token.type == TokenType.STRING){
			message = String().append(token.value).quote().to_string();
		} else if(token.type == TokenType.IDENTIFIER){
			message = token.value;
		} else {
			message = token.to_string();
		}
		
		wrapper_node.append(ASTPrinterNode("<" + message + " " + token.span.to_string() + ">"));
		this.current.append(wrapper_node);
	}
	
	// Append a string to the current AST printer node from a name.
	append_string(name, value){
		this.current.append(
			ASTPrinterNode("{" + name + ": " + String().append(value).quote().to_string() + "}")
		);
	}
	
	// End and return the current AST printer node.
	end(){
		var current = this.current;
		this.current = nil;
		return current;
	}
}
