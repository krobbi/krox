// A boxed string that can be manipulated.
class String {
	// Initialize the boxed string's string.
	init(){
		// The boxed string's string.
		this.string = "";
	}
	
	// Wrap the boxed string in quotes and return the boxed string.
	quote(){
		var quote_string = _chr(CHAR_QUOTE);
		var length = _length(this.string);
		var escaped = "";
		
		for(var i = 0; i < length; i = i + 1){
			var char_string = _substring(this.string, i, 1);
			var char = _ord(char_string);
			
			if(char == CHAR_TAB){
				escaped = escaped + "\t";
			} else if(char == CHAR_LINE){
				escaped = escaped + "\n";
			} else if(char == CHAR_CR){
				escaped = escaped + "\r";
			} else if(char == CHAR_QUOTE){
				escaped = escaped + "\" + quote_string;
			} else if(char == CHAR_APOSTROPHE){
				escaped = escaped + "\'";
			} else if(char == CHAR_BACKSLASH){
				escaped = escaped + "\\";
			} else {
				escaped = escaped + char_string;
			}
		}
		
		this.string = quote_string + escaped + quote_string;
		return this;
	}
	
	// Append a string to the boxed string and return the boxed string.
	append(value){
		this.string = this.string + value;
		return this;
	}
	
	// Append an integer to the boxed string and return the boxed string.
	append_int(value){
		var formatted = "";
		
		if(value < 0){
			value = -value;
			formatted = "-";
		}
		
		var place = 10;
		
		while(place <= value){
			place = place * 10;
		}
		
		while(place >= 10){
			place = place / 10;
			var digit = _trunc(value / place);
			value = value - digit * place;
			formatted = formatted + _chr(CHAR_0 + digit);
		}
		
		this.string = this.string + formatted;
		return this;
	}
	
	// Put the boxed string to an output stream with a trailing line feed.
	put_line(stream){
		var length = _length(this.string);
		
		for(var i = 0; i < length; i = i + 1){
			_put(_ord(_substring(this.string, i, 1)), stream);
		}
		
		_put(CHAR_LINE, stream);
	}
	
	// Return the boxed string represented as a string.
	to_string(){
		return this.string;
	}
}
