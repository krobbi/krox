// LoxKrox Generator
// A source generator for LoxKrox.
// Copyright (c) 2023 Chris Roberts (Krobbizoid).
// Released under the MIT License:
// https://krobbi.github.io/license/2023/mit.txt

// Generate LoxKrox.
fun generate(line, module){
	line("// LoxKrox");
	line("// A Krox compiler written in Lox.");
	line("// Copyright (c) 2023 Chris Roberts (Krobbizoid).");
	line("// Released under the MIT License:");
	line("// https://krobbi.github.io/license/2023/mit.txt");
	line("");
	line("// This file was generated by `generator.lox`. Do not edit it directly.");
	line("// Run `generator.lox` or use `make regen` to regenerate LoxKrox from source.");
	
	// Strings.
	module("string/char.lox");
	module("string/string.lox");
	
	// Collections.
	module("collections/list_node.lox");
	module("collections/list_iterator.lox");
	module("collections/list.lox");
	module("collections/map_node.lox");
	module("collections/map.lox");
	
	// Logger.
	module("logger/span.lox");
	module("logger/log_record.lox");
	module("logger/logger.lox");
	
	// Lexer.
	module("lexer/token_type.lox");
	module("lexer/token.lox");
	module("lexer/lexer.lox");
	
	// AST nodes.
	module("ast/ast_node.lox");
	module("ast/nodes/block_stmt_ast_node.lox");
	module("ast/nodes/export_ast_node.lox");
	module("ast/nodes/export_item_ast_node.lox");
	module("ast/nodes/expr_stmt_ast_node.lox");
	module("ast/nodes/fn_stmt_ast_node.lox");
	module("ast/nodes/import_ast_node.lox");
	module("ast/nodes/import_item_ast_node.lox");
	module("ast/nodes/literal_expr_ast_node.lox");
	module("ast/nodes/module_ast_node.lox");
	module("ast/nodes/nop_stmt_ast_node.lox");
	module("ast/nodes/paren_expr_ast_node.lox");
	module("ast/nodes/print_stmt_ast_node.lox");
	module("ast/nodes/program_ast_node.lox");
	
	// AST utilities.
	module("ast/ast_visitor.lox");
	module("ast/printer/ast_printer_node.lox");
	module("ast/printer/ast_printer.lox");
	
	// Parser.
	module("parser/parser.lox");
	
	// Importer.
	module("importer/importer.lox");
	
	// Lifecycle.
	module("tests/run_tests.lox");
	module("core/main.lox");
}

// Put a line of text to an output stream.
fun put_line(line, stream){
	var length = x_length(line);
	
	for(var i = 0; i < length; i = i + 1){
		x_put(x_ord(x_substring(line, i, 1)), stream);
	}
	
	x_put(10, stream); // Put '\n'.
}

// Print an error message.
fun print_error(message){
	put_line(message, x_stderr());
}

// Pad a message to a length with a suffix.
fun pad(message, length, suffix){
	var message_length = x_length(message);
	
	while(message_length < length){
		message = message + suffix;
		message_length = message_length + 1;
	}
	
	return message;
}

// Run LoxKrox generator from an output directory path and file name.
fun run(dir, file){
	var write_stream = x_write(dir + file);
	
	if(!write_stream){
		print_error("Failed to open `" + file + "` for writing.");
		return;
	}
	
	// Add a line to the write stream.
	fun add_line(line){
		put_line(line, write_stream);
	}
	
	// Add a module to the write stream.
	fun add_module(module){
		add_line("");
		add_line(pad("// MODULE // `" + module + "` // ====", 77, "=") + " //");
		add_line("");
		
		var read_stream = x_read(dir + module);
		
		if(!read_stream){
			print_error("Failed to open `" + module + "` for reading. File may not exist.");
			add_line("// !!! Failed to read.");
			return;
		}
		
		var char = x_get(read_stream);
		
		while(char){
			x_put(char, write_stream);
			char = x_get(read_stream);
		}
		
		if(!x_close(read_stream)){
			print_error("Failed to close `" + module + "` after reading.");
		}
	}
	
	generate(add_line, add_module);
	
	if(!x_close(write_stream)){
		print_error("Failed to close `" + file + "` after writing.");
	}
}

// Return a directory path from a file path.
fun get_file_dir(file){
	var file_length = x_length(file);
	var dir = "";
	var dir_length = 0;
	
	for(var i = 0; i < file_length; i = i + 1){
		var char_string = x_substring(file, i, 1);
		
		if(char_string == "/" or char_string == "\"){
			dir = dir + "/";
			dir_length = i + 1;
		} else {
			dir = dir + char_string;
		}
	}
	
	return x_substring(dir, 0, dir_length);
}

// Run LoxKrox generator from arguments.
fun main(){
	if(x_args() == 1){
		run(get_file_dir(x_arg(0)), "krox.lox");
	} else {
		print_error("Expected arguments `generator.lox`.");
	}
}

main();
